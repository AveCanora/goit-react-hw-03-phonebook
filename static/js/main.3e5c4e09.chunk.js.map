{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","App.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.jsx","index.js"],"names":["module","exports","ContactForm","state","name","number","onChangeInput","event","currentTarget","value","setState","onSubmitHandler","preventDefault","onSubmit","props","handlers","onResetInputsHandler","this","className","styles","ContactsForm","onReset","field","label","input","type","pattern","title","onChange","required","button","Component","defaultProps","Filter","filter","options","ContactList","findContact","list","search","trim","toLowerCase","indexOf","onClick","contacts","filtered","ContactsList","map","id","item","Contact","shortid","generate","App","nameContact","find","addContactHandler","alert","deleteContactHandler","idContact","localStorage","getItem","parselContacts","JSON","parse","prevProps","prevState","console","log","setItem","stringify","container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e5c4e09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"Filter_field__2krfX\",\"label\":\"Filter_label__vGDrK\",\"input\":\"Filter_input__Ks0s6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsList\":\"ContactList_ContactsList__3n-Dp\",\"item\":\"ContactList_item__3gxLG\",\"button\":\"ContactList_button__25L-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__YQq4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsForm\":\"ContactForm_ContactsForm__RA-dx\",\"field\":\"ContactForm_field__NMDwd\",\"label\":\"ContactForm_label__Ss-O7\",\"input\":\"ContactForm_input__3_V0V\",\"button\":\"ContactForm_button__2M2ts\"};","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  static defaultProps = {};\r\n  static propTypes = {\r\n    handlers: PropTypes.shape({ onClick: PropTypes.func }).isRequired,\r\n    options: PropTypes.shape({}),\r\n  };\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  onChangeInput = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    const {\r\n      handlers: { onSubmit },\r\n    } = this.props;\r\n    onSubmit(this.state);\r\n    this.onResetInputsHandler();\r\n  };\r\n\r\n  onResetInputsHandler = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form\r\n        className={styles.ContactsForm}\r\n        onSubmit={this.onSubmitHandler}\r\n        onReset={this.onResetInputsHandler}\r\n      >\r\n        <div className={styles.field}>\r\n          <label className={styles.label}>\r\n            Name\r\n            <input\r\n              className={styles.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              onChange={this.onChangeInput}\r\n              value={name}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label className={styles.label}>\r\n            Number\r\n            <input\r\n              className={styles.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              onChange={this.onChangeInput}\r\n              value={number}\r\n              required\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={styles.field}>\r\n          <button className={styles.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nclass Filter extends Component {\r\n  static defaultProps = { options: { filter: '' } };\r\n  static propTypes = {\r\n    handlers: PropTypes.shape({ onChange: PropTypes.func }).isRequired,\r\n    options: PropTypes.shape({ filter: PropTypes.string.isRequired }),\r\n  };\r\n  render() {\r\n    const {\r\n      handlers: { onChange },\r\n      options: { filter },\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className={styles.field}>\r\n        <div className={styles.label}>\r\n          Find contacts by name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            onChange={onChange}\r\n            value={filter}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\r\nimport PropTypes, { arrayOf } from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\n\r\nclass ContactList extends Component {\r\n  static defaultProps = { options: { contacts: [], filter: '' } };\r\n  static propTypes = {\r\n    handlers: PropTypes.shape({ onClick: PropTypes.func }).isRequired,\r\n    options: PropTypes.shape({\r\n      contacts: arrayOf(PropTypes.object).isRequired,\r\n      filter: PropTypes.string.isRequired,\r\n    }),\r\n  };\r\n\r\n  findContact = (list, filter) => {\r\n    const search = filter.trim().toLowerCase();\r\n    if (filter) {\r\n      return list.filter(({ name }) => name.toLowerCase().indexOf(search) >= 0);\r\n    }\r\n    return [...list];\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      handlers: { onClick },\r\n      options: { contacts, filter },\r\n    } = this.props;\r\n    const filtered = this.findContact(contacts, filter);\r\n\r\n    return (\r\n      <ul className={styles.ContactsList}>\r\n        {filtered.map(({ id, name, number }) => {\r\n          return (\r\n            <li className={styles.item} key={id}>\r\n              <span>\r\n                {name}: {number}\r\n              </span>\r\n              <button\r\n                className={styles.button}\r\n                onClick={() => onClick(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactList;","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\n\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport Filter from \"./components/Filter\";\r\nimport ContactList from \"./components/ContactList\";\r\n\r\nimport styles from \"./App.module.css\";\r\n\r\nclass Contact {\r\n  constructor(name, number) {\r\n    this.id = shortid.generate();\r\n    this.name = name;\r\n    this.number = number;\r\n  }\r\n}\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    ],\r\n    filter: \"\",\r\n  };\r\n\r\n  onChangeInput = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  findContact = (nameContact) =>\r\n    this.state.contacts.find(({ name }) => name === nameContact);\r\n\r\n  addContactHandler = ({ name, number }) => {\r\n    if (this.findContact(name)) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    this.setState(({ contacts }) => {\r\n      return { contacts: [...contacts, new Contact(name, number)] };\r\n    });\r\n  };\r\n\r\n  deleteContactHandler = (idContact) => {\r\n    this.setState(({ contacts }) => {\r\n      return {\r\n        contacts: [...contacts].filter(({ id }) => id !== idContact),\r\n      };\r\n    });\r\n  };\r\n  componentDidMount() {\r\n\r\n    const contacts = localStorage.getItem('contacts');\r\n    const parselContacts = JSON.parse(contacts);\r\n    if (parselContacts) { this.setState({ contacts: parselContacts }); }\r\n\r\n\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      console.log('Обновилось поле contacts');\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm\r\n          handlers={{\r\n            onSubmit: this.addContactHandler,\r\n          }}\r\n        />\r\n        <h2>Contacts</h2>\r\n        <Filter\r\n          handlers={{\r\n            onChange: this.onChangeInput,\r\n          }}\r\n          options={{ filter }}\r\n        />\r\n        <ContactList\r\n          handlers={{ onClick: this.deleteContactHandler }}\r\n          options={{ contacts, filter }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}